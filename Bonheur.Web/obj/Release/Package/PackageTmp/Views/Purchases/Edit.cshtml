@model Bonheur.Web.Models.BonheurObjects.PurchaseObject

@{
    ViewBag.Title = "Edit";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Purchase</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Purchase.PurchaseID)

        <div class="form-group">
            <label class="control-label col-md-2">
                Created Date
            </label>
            <div class="col-md-10">

                @Html.EditorFor(model => model.Purchase.CreatedDate, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "Enter Date here..." } })
                @Html.ValidationMessageFor(model => model.Purchase.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">
                Supplier
            </label>
            <div class="col-md-10">
                @Html.DropDownList("SupplierID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Purchase.SupplierID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">
                Invoice Number
            </label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Purchase.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Purchase.InvoiceNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (!Model.Purchase.IsFinalize)
                {
                    <input type="submit" value="Save" class="btn btn-default" />
                    @Html.ActionLink("Finalize", "FinalizePurchase", new { id = Model.Purchase.PurchaseID }, new { @class = "btn btn-default" })
                }
            </div>
        </div>
    </div>
}
@if (!Model.Purchase.IsFinalize)
{
    Decimal total = 0;
    Decimal totalperRow = 0;

    <div class="row">
        @using (Html.BeginForm("CreatePurchaseItem", "Purchases"))
        {
        @Html.AntiForgeryToken()
        <div class="col-md-6">
            <div class="form-horizontal">

                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Purchase.PurchaseID)
                <div class="form-group">
                    <label class="control-label col-md-2">Product</label>

                    <div class="col-md-10">
                        @Html.DropDownList("PurchaseCategoryID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PurchaseItem.PurchaseCategoryID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2">Unit Count</label>

                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PurchaseItem.UnitCount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PurchaseItem.UnitCount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2">Amount</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PurchaseItem.Amount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PurchaseItem.Amount, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    <label class="col-md-offset-2 col-md-10">
                        @if (!Model.Purchase.IsFinalize)
                {
                    <input type="submit" value="Add Item" class="btn btn-default" />}
                    </label>
                </div>
            </div>
        </div>
        }
        @using (Html.BeginForm("CreateCategory", "Purchases"))
        {
        @Html.AntiForgeryToken()
        <div class="col-md-6">
            <div class="form-horizontal">

                <hr />
                @Html.HiddenFor(model => model.Purchase.PurchaseID)
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseCategory.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PurchaseCategory.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PurchaseCategory.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
        }
    </div>

        <table class="table">
            <thead>
                <tr>
                    <th>
                        Item
                    </th>
                    <th>
                        Unit Count
                    </th>
                    <th>
                        Amount
                    </th>
                    <th>
                        Total
                    </th>

                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Purchase.PurchaseItems)
                {
                    totalperRow = item.UnitCount * item.Amount;
                    total = total + totalperRow;
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.PurchaseCategory.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UnitCount)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Amount)
                        </td>
                        <td>
                            @totalperRow.ToString("N")
                        </td>

                        <td>
                            @if (!Model.Purchase.IsFinalize)
                            {
                                @Html.ActionLink("Remove", "DeletePurchaseItem", new { id = item.PurchaseItemID })
                            }
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Total</td>
                    <td></td>
                    <td></td>
                    <td>@total.ToString("N")</td>

                    <td></td>
                </tr>
            </tfoot>

        </table>
    }



    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>



    @section Scripts {

        <script type="text/javascript">
            $(function () {
                // Initialize numeric spinner input boxes
                //$(".numeric-spinner").spinedit();
                // Initialize modal dialog
                // attach modal-container bootstrap attributes to links with .modal-link class.
                // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
                $('body').on('click', '.modal-link', function (e) {
                    e.preventDefault();
                    $(this).attr('data-target', '#modal-container');
                    $(this).attr('data-toggle', 'modal');
                });
                // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
                $('body').on('click', '.modal-close-btn', function () {
                    $('#modal-container').modal('hide');
                });
                //clear modal cache, so that new content can be loaded
                $('#modal-container').on('hidden.bs.modal', function () {
                    $(this).removeData('bs.modal');
                });
                $('#CancelModal').on('click', function () {
                    return false;
                });
            });
        </script>
        <script type="text/javascript">
            $(function () { // will trigger when the document is ready
                $('.datepicker').datepicker(); //Initialise any date pickers
            });


        </script>
    }
